//go:build generate
// +build generate

package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"net/http"
	"os"
)

const (
	MinecraftVersion = "1.19"
	DataURL          = "https://raw.githubusercontent.com/PrismarineJS/minecraft-data/master/data/pc/" + MinecraftVersion + "/blocks.json"
)

const BlocksTemplate = `
// This file was generated by blocks_gen.go. Any changes will be lost.

package data

var blocks = []string{
	{{ range . }}"{{ . }}",
	{{ end }}
}

func IsBlock(id string) bool {
	for _, currentID := range blocks {
		if currentID == id {
			return true
		}
	}

	return false
}
`

func FetchBlockIDs() ([]string, error) {
	response, err := http.Get(DataURL)
	if err != nil {
		return nil, err
	}

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return nil, err
	}

	var data []map[string]any
	err = json.Unmarshal(body, &data)
	if err != nil {
		return nil, err
	}

	result := make([]string, 0)
	for _, block := range data {
		result = append(result, fmt.Sprintf("minecraft:%s", block["name"]))
	}

	return result, nil
}

//go:generate go run $GOFILE
//go:generate go fmt ../data/blocks.go
func main() {
	blockIDs, err := FetchBlockIDs()
	if err != nil {
		fmt.Println("Error fetching blocks generators:", err)
		os.Exit(1)
		return
	}

	err = os.MkdirAll("../data", 0644)
	if err != nil {
		fmt.Println("Unable to make dirs:", err)
		os.Exit(1)
		return
	}

	file, err := os.Create("../data/blocks.go")
	if err != nil {
		fmt.Println("Unable to create blocks.go:", err)
		os.Exit(1)
		return
	}

	defer file.Close()

	tpl, err := template.New("").Parse(BlocksTemplate)
	if err != nil {
		fmt.Println("Unable to parse blocks template:", err)
		os.Exit(1)
		return
	}

	err = tpl.Execute(file, blockIDs)
	if err != nil {
		fmt.Println("Unable to execute template:", err)
		os.Exit(1)
		return
	}
}
